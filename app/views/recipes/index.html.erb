  <%= render "recipes/banner" %>

  <h4 class="text-center">ALL OUR RECIPES:</h4>

  <div class="container">

    <div class="row" id="recipes">
      <% if @recipes.blank? %>
      <h4>There are no recipes containing the term <%= params[:search] %>.</h4>
      <% end %>
      <% @recipes.each do |recipe| %>
      <div class="col-xs-12 col-sm-6 col-md-4">
        <%= link_to recipe_path(recipe) do %>
        <div class="card" style="background-image: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0)), url('<%= if recipe.picture.url == nil
          image_path('https://placeholdit.co//i/500x500?')
        else
          cl_image_path recipe.picture.url
        end
        %>')">
      </div>
      <%end%>
      <div class="card-description">
        <% arr = [] %>
        <% recipe.reviews.each do |review| %>
        <% arr << review.rating %>
        <% end %>
        <% average = arr.inject{ |sum, el| sum + el }.to_f / arr.size %>
        <p> rating : <%= average.round(1) if average %> / 5</p>
      </div>

      <div class="link-box">
        <%= link_to recipe_path(recipe) do %>
        <%=recipe.name.capitalize%>
        <% if current_user %>
          <% if Favorite.where(recipe_id: recipe.id, user_id: current_user.id).count > 0 %>
            <%= link_to favorite_path(recipe), :method => :delete, class: "favorite" do %>
              <span class="fa fa-heart info"></span>
            <% end %>
          <% else %>
            <%= link_to favorites_path(recipe_id: recipe.id), :method => :post, class: "favorite" do %>
              <span class="fa fa-heart-o"></span>
            <% end %>
          <% end %>
        <% end %>
        <%end%>
      </div>
    </div>
    <%end%>
  </div>
</div>


<%= content_for :after_js do %>

  <script>
    var client = algoliasearch("AMLNOKWPBJ", "5b8cb611c7a8bc80b876e4f7abbb1517");
    var index = client.initIndex('Ingredient_development');

    const searchbar = document.getElementById("aa-search-input");
    const recipes = document.getElementById('recipes');
    var html = recipes.innerHTML;

    const search = (event) => {
      index.search(
        {
          query: searchbar.value,
          hitsPerPage: 10,
        },
        function searchDone(err, content) {
          if (err) {
            console.error(err);
            return;
          }
          recipes.innerHTML = "";
          if (!searchbar.value == "") {
            const displayed_recipes = [];
            content.hits.forEach((hit) => {

              if (!displayed_recipes.includes(hit["ingredient_recipes"][0]["id"])) {
                displayed_recipes.push(hit["ingredient_recipes"][0]["id"])
                recipes.insertAdjacentHTML("beforeend", `
                  <div class="col-xs-12 col-sm-6 col-md-4">
                    <a href="/recipes/${hit["ingredient_recipes"][0]["id"]}">
                      <div class="card" style="background-image: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0)), url('${hit["ingredient_recipes"][0]["picture"]["url"]}')">
                      </div>
                    </a>
                    <div class="link-box">
                      <a href="/recipes/${hit["ingredient_recipes"][0]["id"]}">${hit["ingredient_recipes"][0]["name"]}</a>
                    </div>
                  </div>
                `)
              }
            })
          } else {
            recipes.insertAdjacentHTML("beforeend", `${html}`);
          }
        }
      );
    }

    searchbar.addEventListener("keyup", search);

    //initialize Algolia autocomplete on search input (ID selector must match)


    autocomplete('#aa-search-input',
    { hint: false,
    autoselect: true }, {
        source: autocomplete.sources.hits(index, {hitsPerPage: 5}),
        //value to be displayed in input control after user's suggestion selection
        displayKey: 'name',
        //hash of templates used when rendering dataset
        templates: {
          //'suggestion' templating function used to render a single suggestion
          suggestion: function(suggestion) {
             return '<span>' +
            suggestion._highlightResult.name.value+ '</span>';
          }
        }
    });



    const bindConfirm = (element) => {
      element.addEventListener("submit", (event) => {
          event.preventDefault();
      });
    };

    document.querySelectorAll(".confirmable").forEach(bindConfirm);
  </script>
<% end %>





